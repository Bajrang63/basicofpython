# -*- coding: utf-8 -*-
"""Assignment_conditionals_&_loops.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1liHMkuuyStzkdHtU_5PMmiVPKgRbGrCP
"""

def find_largest(num1, num2, num3):
    # Determine the largest number
    if (num1 >= num2) and (num1 >= num3):
        return num1
    elif (num2 >= num1) and (num2 >= num3):
        return num2
    else:
        return num3

# Input from the user
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))
num3 = float(input("Enter the third number: "))

# Find and display the largest number
largest = find_largest(num1, num2, num3)
print(f"The largest among the numbers {num1}, {num2}, and {num3} is: {largest}")

def is_leap_year(year):
    # Check if year is divisible by 4 and either not divisible by 100 or divisible by 400
    if (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0):
        return True
    else:
        return False

# Input from user
year = int(input("Enter a year: "))

# Check if the year is a leap year
if is_leap_year(year):
    print(f"{year} is a leap year.")
else:
    print(f"{year} is not a leap year.")

# Right-angled triangle pattern
def right_angled_triangle(n):
    for i in range(1, n + 1):
        print('*' * i)

# Inverted right-angled triangle pattern
def inverted_triangle(n):
    for i in range(n, 0, -1):
        print('*' * i)



# Pyramid pattern
def pyramid_pattern(n):
    for i in range(1, n + 1):
        print(' ' * (n - i) + '*' * (2 * i - 1))


def right_angled_triangle_repeat_numbers(n):
    for i in range(1, n + 1):
        for j in range(1, i + 1):
            print(i, end=' ')  # Print the row number repeatedly
        print()

# Input from the user
n = int(input("Enter the number of rows: "))
right_angled_triangle_repeat_numbers(n)

# Input from the user
#n = int(input("Enter the number of rows for the patterns: "))

print("\nRight-angled Triangle Pattern:")
right_angled_triangle(n)

print("\nInverted Right-angled Triangle Pattern:")
inverted_triangle(n)

print("\nPyramid Pattern:")
pyramid_pattern(n)

def pyramid_pattern_with_alphabets(n):
    alphabet = 'A'  # Starting alphabet
    for i in range(1, n + 1):
        print(' ' * (n - i) + alphabet * (2 * i - 1))
        # Update the alphabet for the next row
        alphabet = chr(ord(alphabet) + 1)

def right_angled_triangle_with_numbers(n):
    for i in range(1, n + 1):
        for j in range(1, i + 1):
            print(j, end=' ')
        print()

def right_angled_triangle_continuous_numbers(n):
    num = 1  # Initialize the starting number
    for i in range(1, n + 1):
        for j in range(1, i + 1):
            print(num, end=' ')
            num += 1  # Increment the number for the next position
        print()



# Input from the user
n = int(input("Enter the number of rows for the alphabet pyramid: "))
pyramid_pattern_with_alphabets(n)

print("Enter the number of rows for the number triangle: ")
right_angled_triangle_with_numbers(n)

print("Enter the number of rows: ")
right_angled_triangle_continuous_numbers(n)

def right_angled_triangle_right_aligned(n):
    for i in range(1, n + 1):
        print(' ' * (n - i), end='')  # Print spaces for alignment
        for j in range(1, i + 1):
            print(j, end=' ')
        print()

# Input from the user
n = int(input("Enter the number of rows: "))
right_angled_triangle_right_aligned(n)

